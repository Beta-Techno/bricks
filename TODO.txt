# Migration to bpg/proxmox Provider

## Context
- Current provider: telmate/proxmox (version 2.9.14)
- Target provider: bpg/proxmox (version >= 0.78.0)
- Reason: Need proper resource management for roles, ACLs, and API tokens

## Current Limitations (telmate/proxmox)
1. No proper role management
   - Currently using null_resource or shell commands
   - No state management for roles
   - No proper error handling

2. No proper ACL management
   - Currently using null_resource or shell commands
   - No state management for ACLs
   - No proper error handling

3. Limited user management
   - Basic user creation
   - No proper role assignment
   - No proper state management

4. Basic API token support
   - Limited token management
   - No proper state management
   - No proper error handling

## Required Changes

### 1. Provider Update
```hcl
terraform {
  required_providers {
    proxmox = {
      source  = "bpg/proxmox"
      version = ">= 0.78.0"
    }
  }
}
```

### 2. New Resource Types
```hcl
# Role management
resource "proxmox_role" "ops_prov" {
  roleid = "OpsProv"
  privileges = [
    "Datastore.AllocateSpace",
    "Datastore.Audit",
    "Pool.Allocate",
    "Sys.Audit",
    "Sys.Console",
    "Sys.Modify",
    "VM.Allocate",
    "VM.Audit",
    "VM.Clone",
    "VM.Config.CDROM",
    "VM.Config.CPU",
    "VM.Config.Disk",
    "VM.Config.HWType",
    "VM.Config.Memory",
    "VM.Config.Network",
    "VM.Config.Options",
    "VM.Monitor",
    "VM.PowerMgmt"
  ]
}

# User management
resource "proxmox_user" "ops" {
  userid   = "ops@pve"
  password = var.ops_password
  comment  = "Terraform automation user"
}

# ACL management
resource "proxmox_acl" "ops_prov" {
  path = "/"
  roleid = proxmox_role.ops_prov.roleid
  userid = proxmox_user.ops.userid
}

# API token management
resource "proxmox_api_token" "ops" {
  userid  = proxmox_user.ops.userid
  comment = "Terraform automation token"
}
```

### 3. State Management
- Remove all null_resource blocks
- Replace shell commands with proper resources
- Add proper error handling
- Add state validation

### 4. Testing Requirements
1. Provider installation
   - Verify provider can be installed
   - Verify version constraints

2. Resource creation
   - Test role creation
   - Test user creation
   - Test ACL assignment
   - Test API token generation

3. State management
   - Test state updates
   - Test state removal
   - Test error handling

4. Integration testing
   - Test with existing environment
   - Test with new environment
   - Test with multiple nodes

## Migration Steps
1. Update provider in all modules
2. Replace null_resource with proper resources
3. Update state management
4. Add proper error handling
5. Test with existing environment
6. Update documentation
7. Update CI/CD pipeline

## Dependencies
- Terraform >= 1.0.0
- Proxmox VE >= 7.0
- Go >= 1.18 (for provider)

## References
- bpg/proxmox provider documentation: https://registry.terraform.io/providers/bpg/proxmox/latest/docs
- Proxmox API documentation: https://pve.proxmox.com/pve-docs/api-viewer/
- Terraform provider development: https://developer.hashicorp.com/terraform/plugin

## Notes
- Backup state before migration
- Test in non-production environment first
- Update all modules that use Proxmox provider
- Consider impact on existing automation
- Plan for rollback if needed 